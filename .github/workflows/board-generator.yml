name: Update GitHub Issues Board

on:
  issues:
    types: [opened, edited, closed, reopened]
  schedule:
    - cron: '0 * * * *'   # every hour

permissions:
  contents: write
  issues: read
  repository-projects: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Fetch issues + board status (GraphQL)
        id: fetch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const projectTitle = 'My Board';

            // 1) Locate your ProjectV2 by its title
            const { repository } = await github.graphql(`
              query($owner: String!, $repo: String!, $title: String!) {
                repository(owner: $owner, name: $repo) {
                  projectsV2(first: 100) {
                    nodes {
                      id
                      number
                      title
                    }
                  }
                }
              }
            `, { owner, repo, title: projectTitle });

            const project = repository.projectsV2.nodes.find(p => p.title === projectTitle);
            if (!project) throw new Error(\`Project "\${projectTitle}" not found\`);
            const projectNumber = project.number;

            // 2) Page through all items (issues) in that project
            let items = [];
            let cursor = null;
            do {
              const res = await github.graphql(`
                query($owner: String!, $repo: String!, $number: Int!, $cursor: String) {
                  repository(owner: $owner, name: $repo) {
                    projectV2(number: $number) {
                      items(first: 100, after: $cursor) {
                        pageInfo { hasNextPage endCursor }
                        nodes {
                          content {
                            ... on Issue {
                              number
                              title
                              state
                              body
                            }
                          }
                          fieldValues(first: 1) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `, { owner, repo, number: projectNumber, cursor });

              const page = res.repository.projectV2.items;
              for (const node of page.nodes) {
                const issue = node.content;
                const column = node.fieldValues.nodes[0]?.name || 'Unassigned';
                items.push({
                  number: issue.number,
                  title: issue.title,
                  state: issue.state,
                  body: issue.body,
                  column
                });
              }
              cursor = page.pageInfo.hasNextPage ? page.pageInfo.endCursor : null;
            } while (cursor);

            // 3) Return your enriched JSON
            return JSON.stringify(items, null, 2);

      - name: Write data file
        run: |
          mkdir -p _data
          echo "${{ steps.fetch.outputs.result }}" > _data/issues.json

      - name: Commit & push if changed
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add _data/issues.json
          git diff --quiet || git commit -m "chore: update issues data"
          git push